Class Services.Resources Extends %Persistent
{

/// The fully qualifed path of the fhir.schema.json
/// Note well: the Definitions directory must be put into the container under /data
Parameter FHIRSchemaFileName = "/data/Definitions/fhir.schema.json";

Parameter FHIRSearchParamFileName = "/data/Definitions/search-parameters.json";

Parameter FHIRRevIncludeFileName = "/data/Definitions/profiles-resources.json";

Property FhirSchemaObj As %DynamicObject;

Property FhirSearchParamObj As %DynamicObject;

// Property Resources As array Of %DynamicObject;

Property SearchParams As array Of %DynamicObject;

Property revSearchLevel As %Integer;

Property typeLevel As %Integer;

Property revSearchType As %String;

Property typeName As %String;

/// see if we need to read the fhir schema
/// 
/// Iterate over global ^BaseTypes.ResourceD
Method ResIterate()
{
  Set count = ^BaseTypes.ResourceD
  Write !, "Resource Count="_count, !
  // Start by setting subscript to ""
  Set subscript = ""
  // "Argumentless" for loop
  For {
    // Get the next subscript
    Set subscript = $ORDER(^BaseTypes.ResourceD(subscript))
    // When we get to the end, quit the for loop
    Quit:(subscript = "")
    // Otherwise, write the subscript and the value
    // stored at ^testglobal(subscript)
    Write !, "subscript=", subscript, ", value=", ^BaseTypes.ResourceD(subscript)
  }
}

/* Method CheckForFhirResources() As %Status
{

    Set sc = $$$OK
    Do $SYSTEM.SQL.Schema.DropTable("BaseTypes.Resource",1,.SQLCODE,.%msg)
    If SQLCODE '= 0 {Write "SQLCODE ",SQLCODE," error: ",%msg}


    Return sc
} */
/// read a file, with fhir schema properties and create an array of resources
Method ReadFHIRSchema() As %Status
{
    
    Set sc = $$$OK
    Try {
    Set FhirSchemaObj = {}.%FromJSON(..#FHIRSchemaFileName)
    }
    Catch err {
        Write !, "Error name: ", ?20, err.Name,
              !, "Error code: ", ?20, err.Code,
              !, "Error location: ", ?20, err.Location,
              !, "Additional data: ", ?20, err.Data, !
        Set sc = $$$ERROR($$$GeneralError,)
        Write !, "could not read schema file as json"
        Return sc
    }
    Set i = FhirSchemaObj.discriminator.mapping.%GetIterator()
    Set resourceNames = []
    While i.%GetNext(.key , .fhirResourcePath ) {
        Do resourceNames.%Push(.key, "string")
        //Write "Key= "_key_" Index= "_i,!
    }



    Do ..SaveResourcesToDatabase(.resourceNames)

    Return sc
}

Method SaveResourcesToDatabase(arrayCollection) As %Status
{
     Set sc = $$$OK
     Set cname = $CLASSNAME(arrayCollection)
     Set iter = arrayCollection.%GetIterator()
     While iter.%GetNext(.key, .value)
    //{ Write "element:"_key_"=/"_value_"/  "}
      {
          Set res = ##class(BaseTypes.Resource).%New(value)
          Set status = res.%Save()
          If $$$ISERR(status)
          {
            Do $SYSTEM.Status.DisplayError(status) Quit:status
          }
      }
    Return sc
}

/// Read the FHIR search parameter file
Method ReadFHIRRevInclude() As %Status
{
    
    Set sc = $$$OK
    Try {
    Set FhirRevIncludeObj = {}.%FromJSON(..#FHIRRevIncludeFileName)
    }
    Catch err {
        Write !, "Error name: ", ?20, err.Name,
              !, "Error code: ", ?20, err.Code,
              !, "Error location: ", ?20, err.Location,
              !, "Additional data: ", ?20, err.Data, !
        Set sc = $$$ERROR($$$GeneralError,"could not read file as json")
        Write !, "could not read profiles-resouces file as json"
        Return sc      
    }
    Set i = FhirRevIncludeObj.entry.%GetIterator()
    While i.%GetNext(.key , .fhirPath ) {
        Do ..RecursiveWrite(.key, .fhirPath, 0, "")
    }
    
    Return sc
}

Method RecursiveWrite(key, fhirarg, level, upkey) As %Status
{
    Set sc = $$$OK
    If ($ISOBJECT(fhirarg)) && (fhirarg.%IsA("%Library.DynamicArray")) {
         Set i = fhirarg.%GetIterator()
          //Write ?5*level, "Iterating over Dynamic Array - Current Key = "_key, !
          Set superkey = key
          While i.%GetNext(.fkey, .fpath){
            Do ..RecursiveWrite(.fkey, .fpath, level + 1, .superkey)
        }
    }
    ElseIf ($ISOBJECT(fhirarg)) && (fhirarg.%IsA("%Library.DynamicObject")){
            Set i = fhirarg.%GetIterator()
            //Write ?5*level,"Iterating over Dynamic Object - Current Key = "_key, !
            While i.%GetNext(.fkey, .fpath){
            Set superkey = key    
            Do ..RecursiveWrite(.fkey, .fpath, level + 1, .superkey)
            }
    }
    Else {
             If (key = "type"){
                Set ..typeLevel = level
                Set ..typeName = fhirarg 
                Write ?5*level, "Level= "_level_" ", key_"="_fhirarg, !
            }

            /* If (upkey = "searchInclude"){
                Write ?5*level, "Level= "_level_" ", upkey_"="_fhirarg, !
            } */

            If (upkey = "searchRevInclude"){
                Set ..revSearchLevel = level
                Set ..revSearchType = fhirarg
                Write ?5*level, "Level= "_level_" ", upkey_"="_fhirarg, !
                If ((..revSearchLevel - ..typeLevel) = 1){
                    //we know the type will be the target resource
                    Set revres = ##class(BaseTypes.RevSearchParameter).%New(..typeName, ..revSearchType)
                }
            }
         }

    Return sc
}

Method WriteObject(objarg) As %Status
{
    Set sc = $$$OK
    If (objarg.%IsA("%Library.DynamicObject")){
         Set i = objarg.%GetIterator()
          While i.%GetNext(.key, .path){
              Write key_"="_path, !
          }
    }
    Return sc
}

Method ReadFHIRSearchParams() As %Status
{
    
    Set sc = $$$OK
    Try {
    Set FhirSearchParamObj = {}.%FromJSON(..#FHIRSearchParamFileName)
    }
    Catch err {
        Write !, "Error name: ", ?20, err.Name,
              !, "Error code: ", ?20, err.Code,
              !, "Error location: ", ?20, err.Location,
              !, "Additional data: ", ?20, err.Data, !
        Set sc = $$$ERROR($$$GeneralError,"could not read file as json")
        Write !, "could not read search parameter file as json"
        Return sc      
    }
    Set i = FhirSearchParamObj.entry.%GetIterator()
    While i.%GetNext(.key , .fhirPath ) {
        //Write key_"="_fhirPath,!
        Set id = "", rtype = "", br = "", ver = "", sp = "", exp = "", des = "", ty = "", comp = "", tar = ""
        Set j = fhirPath.resource.%GetIterator()
        While j.%GetNext(.subkey, .subfhirPath){
            //Write subkey_"="_subfhirPath, !
            If (subkey = "resourceType"){
                Set rtype = subfhirPath
                Continue
            }
            If (subkey = "id"){
                Set br = ..GetBaseResource(subfhirPath)
                Set id = subfhirPath
                Continue
                //Write "Base Resource"_"="_br, !
            }
            If (subkey = "version"){
                Set ver = subfhirPath
                Continue
            }
            If (subkey = "name"){
                Set sp = subfhirPath
                Continue
            }
            If (subkey = "experimental"){
                Set exp = subfhirPath
                Continue
            }
            If (subkey = "description"){
                Set des = subfhirPath
                Continue
            }
            If (subkey = "type"){
                Set ty = subfhirPath
                Continue
            }
            If (subkey = "comparator"){
                Set comp = subfhirPath
                Continue
            }
            If ((ty = "reference") && (subkey = "target")){
                Set tar = subfhirPath
                Continue
            }
    }
        If (rtype = "SearchParameter"){
            Set searchParameter = ##class(BaseTypes.SearchParameter).%New(br, sp, ver, exp, des, ty, .comp, .tar)
            Do ..SearchParams.SetAt(searchParameter, id)
            Write searchParameter.ToString(), !
            //Write searchParameter.ResTarget, !
            //Write "target instance class name: ",$CLASSNAME(searchParameter.ResTarget), !
        }
    }

    Return sc
}

Method GetBaseResource(resourceId As %String) As %String
{
    Return $PIECE(resourceId, "-", 1)
}


}
